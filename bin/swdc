#!/usr/bin/env php
<?php

use Dotenv\Dotenv;
use Symfony\Component\Console\Application;

require __DIR__ . '/../vendor/autoload.php';

$dotenv = new Dotenv(getenv('HOME'));
$pharPath = dirname(Phar::running(false));

if (file_exists($pharPath . '/.env')) {
    $dotenv = new Dotenv($pharPath);
    $dotenv->load();
}
elseif (file_exists(getenv('HOME') . '/.env')) {
    $dotenv->load();
}

try {
    // Required ENV vars for this app in production
    $dotenv->required([
        'DOCKER_BASE_DIR',
        'PROJECT_BASE_DIR',
        'USER_NAME',
        'USER_ID',
        'DEFAULT_PROJECT',
    ]);
} catch (\Dotenv\Exception\ValidationException $e) {
    echo $e->getMessage();
    exit(1);
}

$app = new Application('Shopware Docker Control');
$app->addCommands([new ShopwareDockerControl\Commands\BuildContainersCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\StartContainersCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\StopContainersCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\ListShopwareDirectoriesCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\AntConfigCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\BuildUnitCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\SwCliToolsCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\ClearCacheCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\DataGripCommand()]);

$app->run();
