#!/usr/bin/env php
<?php

use Dotenv\Dotenv;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputOption;

require __DIR__ . '/../vendor/autoload.php';

$dotenv = new Dotenv(getenv('HOME'), '.swdc_env');
$pharPath = dirname(Phar::running(false));

if (file_exists($pharPath . '/.swdc_env')) {
    $dotenv = new Dotenv($pharPath, '.swdc_env');
    $dotenv->load();
} elseif (file_exists(getenv('HOME') . '/.swdc_env')) {
    $dotenv->load();
}

try {
    // Required ENV vars for this app in production
    $dotenv->required([
        'DOCKER_BASE_DIR',
        'PROJECT_BASE_DIR',
        'USER_NAME',
        'USER_ID',
        'DEFAULT_PROJECT',
    ]);
} catch (\Dotenv\Exception\ValidationException $e) {
    echo $e->getMessage();
    exit(1);
}

$app = new Application('Shopware Docker Control');

$app->getDefinition()->addOptions([
    new InputOption('--php-version', '-php', InputOption::VALUE_OPTIONAL, 'Which php version to use. (Used to build docker image directory name)', getenv('SWDOCKER_PHP_VERSION')),
    new InputOption('--test-host', '-th', InputOption::VALUE_OPTIONAL, 'Which test host to use.', getenv('TEST_HOST')),
    new InputOption('--use-varnish', '-a', InputOption::VALUE_NONE, 'If set, use varnish image. (Used to build docker image directory name)'),
    new InputOption('--use-ioncube', '-i', InputOption::VALUE_NONE, 'If set, use ioncube image. (Used to build docker image directory name)'),
    new InputOption('--use-xdebug', '-x', InputOption::VALUE_NONE, 'If set, use xdebug image. (Used to build docker image directory name)'),
]);

$app->addCommands([new ShopwareDockerControl\Commands\BuildContainersCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\StartContainersCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\StopContainersCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\RestartContainersCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\ListShopwareDirectoriesCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\AntConfigCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\BuildUnitCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\SwCliToolsCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\ClearCacheCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\StartConsoleCommand()]);
//$app->addCommands([new ShopwareDockerControl\Commands\DataGripCommand()]);
$app->addCommands([new ShopwareDockerControl\Commands\InstallDgLoggerCommand()]);

$app->run();
